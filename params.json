{
  "name": "Chelona",
  "tagline": "A Parboiled2 based W3C RDF 1.1 Turtle parser for Scala and JavaScript",
  "body": "<a href=\"http://www.w3.org/RDF/\" title=\"RDF Resource Description Framework\"> <img border=\"0\" src=\"http://www.w3.org/RDF/icons/rdf_w3c_icon.96.gif\" alt=\"RDF Resource Description Framework Icon\"/></a>\r\n&nbsp;&nbsp;&nbsp;**Cheló̱na Version 1.1**  \r\n\r\nA Parboiled2 based Parser written in Scala for the W3C RDF 1.1 Turtle, TriG, N-Triple and N-Quad Languages\r\n\r\nIntroduction\r\n============\r\n\r\n*Cheló̱na* (χελώνα) is the greek word for turtle. At the time working on this software I spent a beautiful holiday on the island of Rhodos, so this seemed to be an appropriate name for a turtle parser.\r\n\r\nWith *Cheló̱na* you can\r\n \r\n- validate the syntax and semantic of a W3C RDF 1.1 *TriG*, *Turtle*, *N-Quads* or *N-Triples* file\r\n- convert a *TriG* or *N-Quads* file into its canonical quad format\r\n- convert a *Turtle* or *N-Triples* file into its canonical triple format\r\n\r\n*Cheló̱na* supports the creation of your own output format. \r\n*Cheló̱na* leaves it up to you to write the conversion result e.g. to a file, to a database or communicate via actors. \r\n\r\nThe relationship among the various RDF 1.1 formats is shown in this image\r\n\r\n![RDF 1.1 Formats](ressources/RDF-Formats.png)\r\n\r\n*Cheló̱na* successfully masters the complete TriG-, Turtle-, N-Triples and N-Quad test suites described at http://www.w3.org/TR/rdf11-testcases/.\r\nThe 100% compliance of the Turtle test suite is listed at https://dvcs.w3.org/hg/rdf/raw-file/default/rdf-turtle/reports/index.html#subj_10 .\r\nThe compliance of the TriG- and N-Triples test suite is reported to the W3C gremium.\r\n\r\n*Cheló̱na* is written completely in Scala. Parsing of the supported RDF 1.1 formats is done with the help of [Parboiled2](https://github.com/sirthias/parboiled2 \"Parboiled2\").\r\n\r\n\r\nTurtle Section\r\n==============\r\n\r\nFirst Example\r\n=============\r\n\r\nHere a simple turtle file taken from the W3C recommendation which resides at http://www.w3.org/TR/turtle/ :\r\n\r\n    @prefix foaf: <http://xmlns.com/foaf/0.1/> .\r\n\r\n    _:alice foaf:knows _:bob .\r\n    _:bob foaf:knows _:alice .\r\n\r\n*Cheló̱na* dissolves the statements into the canonical form, which is represented by pure subject, predicate and object components:\r\n\r\n    _:alice <http://xmlns.com/foaf/0.1/knows> _:bob .\r\n    _:bob <http://xmlns.com/foaf/0.1/knows> _:alice .\r\n\t\r\nSecond Example\r\n==============\r\n\r\nThe next turtle file is listed as example 15 in the W3C RDF 1.1 Turtle Definition document at http://www.w3.org/TR/turtle :\r\n\r\n    @prefix foaf: <http://xmlns.com/foaf/0.1/> .\r\n\r\n    # Someone knows someone else, who has the name \"Bob\".\r\n    [] foaf:knows [ foaf:name \"Bob\" ] .\r\n\r\n*Cheló̱na* transforms the statements into the simple subject-predicate-object (s-p-o) format:\r\n\r\n    _:a1 <http://xmlns.com/foaf/0.1/knows> _:b1 .\r\n    _:b1 <http://xmlns.com/foaf/0.1/name> \"Bob\" .\r\n\t\r\nThird Example\r\n============\r\n\r\nThis is example 23 from the W3C RDF 1.1 Terse RDF Triple language definition\r\n\r\n\t@prefix : <http://example.org/stuff/1.0/> .\r\n\t(1 2.0 3E1) :p \"w\" .\r\n\t\r\n*Cheló̱na* resolves the collection and gives the equivalent sequence of turtle statements in the canonical form:\r\n\r\n    _:c1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> \"1\"^^<http://www.w3.org/2001/XMLSchema#integer> .\r\n    _:c1 <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> _:c2 .\r\n    _:c2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> \"2.0\"^^<http://www.w3.org/2001/XMLSchema#decimal> .\r\n    _:c2 <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> _:c3 .\r\n    _:c3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> \"3E1\"^^<http://www.w3.org/2001/XMLSchema#double> .\r\n    _:c3 <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> <http://www.w3.org/1999/02/22-rdf-syntax-ns#nil> .\r\n    _:c1 <http://example.org/stuff/1.0/p> \"w\" .\r\n\r\nInstallation\r\n============\r\n\t\r\nCreate a *Cheló̱na* JAR with all dependencies\r\n--------------------------------------------\r\n\r\nThe *sbt-assembly* plugin located at https://github.com/sbt/sbt-assembly is used to create a *Cheló̱na* JAR containing all dependencies.\r\nMove into the *Cheló̱na* directory.\r\nFrom the command line type \r\n\r\n    sbt chelonaJVM/assembly\r\n\t\r\nThis should generate an archive\r\n\r\n    jvm/target/scala-2.11/chelona-assembly-x.x.x.jar\r\n\r\nwhere x.x.x denotes the version information, e.g. chelona-assembly-1.2.0.jar.\r\n\r\nCreate a *Cheló̱na* JavaScript file\r\n-----------------------------------\r\n\r\nMove into the *Cheló̱na* directory.\r\nFrom the command line type \r\n\r\n    sbt \r\n    chelonaJS/compile\r\n    chelonaJS/fullOptJS\r\n\t\r\nThis should generate an JavaScript file\r\n\r\n    js/target/scala-2.11/chelona-opt.js\r\n\r\nRecommended definitions for command line usage\r\n----------------------------------------------\r\n\r\nFor ease of use copy the generated Chelona-assembly-X.X.X.jar to /usr/local/lib/. Define an alias for each of the RDF-formats: \r\n\r\n    alias chelona='scala -Yopt:_ -J-Xmx2G -cp /usr/local/lib/scala-2.11/Chelona-assembly-1.1.0.jar org.chelona.Main'\r\n    alias chelona_trig='scala -Yopt:_ -J-Xmx2G -cp /usr/local/lib/scala-2.11/Chelona-assembly-1.1.0.jar org.chelona.TriGMain'\r\n    alias chelona_ntriples='scala -Yopt:_ -J-Xmx2G -cp /usr/local/lib/scala-2.11/Chelona-assembly-1.1.0.jar org.chelona.NTMain'\r\n    alias chelona_nquads='scala -Yopt:_ -J-Xmx2G -cp /usr/local/lib/scala-2.11/Chelona-assembly-1.1.0.jar org.chelona.NQuadMain'\r\n    \r\nFor huge input data it might be necessary to increase the heap-size.\r\n\r\nRunning *Cheló̱na* from the command line\r\n----------------------------------------\r\n\r\nConversion of the example1.ttl file from the examples directory into the simple S-P-O Turtle format (N3)\r\n\r\n\t<#green-goblin> rel:enemyOf    <#spiderman> \t;\r\n\t    a foaf:Person ;    # in the context of the Marvel universe\r\n\t    foaf:name \"Green Goblin\" ;\r\n\t\tfoaf:mail \"GreenGoblin@marvel.com\" .\r\n\r\n\t<#spiderman>\r\n\t    rel:enemyOf <#green-goblin> ;\r\n\t    a foaf:Person ;\r\n\t    foaf:name \"Spiderman\", \"Человек-паук\"@ru .\r\n\r\nis done with the command shown here: \r\n\r\n    scala -cp ./target/scala-2.11/chelona-assembly-1.1.0.jar org.chelona.Main --verbose ./examples/example1.ttl > example1_n3.ttl\r\n    \r\nor shorter using the appropriate alias\r\n\r\n    chelona -v ./examples/example1.ttl > example1_n3.ttl\r\n\r\nThe output generated lists the name of the output file and the number of generated triples:\r\n\r\n\tConvert: ./examples/example1.ttl\r\n    Input file './examples/example1.ttl' converted in 0.064sec 8 triples (triples per second = 125)\r\n\t\r\nInspecting the output file 'example1_n3.ttl' should give this result:\r\n\r\n\t<http://example.org/#green-goblin> <http://www.perceive.net/schemas/relationship/enemyOf> <http://example.org/#spiderman> .\r\n    <http://example.org/#green-goblin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xmlns.com/foaf/0.1/Person> .\r\n    <http://example.org/#green-goblin> <http://xmlns.com/foaf/0.1/name> \"Green Goblin\" .\r\n    <http://example.org/#green-goblin> <http://xmlns.com/foaf/0.1/mail> \"GreenGoblin@marvel.com\" .\r\n    <http://example.org/#spiderman> <http://www.perceive.net/schemas/relationship/enemyOf> <http://example.org/#green-goblin> .\r\n    <http://example.org/#spiderman> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xmlns.com/foaf/0.1/Person> .\r\n    <http://example.org/#spiderman> <http://xmlns.com/foaf/0.1/name> \"Spiderman\" .\r\n    <http://example.org/#spiderman> <http://xmlns.com/foaf/0.1/name> \"Человек-паук\"@ru .\r\n\r\nValidation of a Turtle File\r\n---------------------------\r\n\r\nWhen passing the parameter '--validate' on the command line, *Cheló̱na* will do a syntax check. No output file is generated.\r\n\r\n    scala -cp ./target/scala-2.11/chelona-assembly-1.1.0.jar org.chelona.Main --validate --verbose examples/example1.ttl\r\n\r\n\tValidate: examples/example1.ttl\r\n    Input file 'examples/example1.ttl' composed of 7 statements successfully validated in 0.099sec (statements per second = 71)\r\n\r\nUnique Blank Node Names\r\n-----------------------\r\n\r\nFor sake of convenience the next examples assume that an alias chelona has been created.\r\n\r\n    alias chelona='scala -Yopt:_ -J-Xmx2G -cp /usr/local/lib/scala-2.11/Chelona-assembly-1.1.0.jar org.chelona.Main'\r\n\r\nThe '--uid' command line argument instructs *Cheló̱na* to use a unique identifier for blank nodes.\r\n\r\n    chelona --uid examples/example23.ttl\r\n\r\n    _:c83cecd897cf243a9a6203bad3f5f0b411 <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> \"1\"^^<http://www.w3.org/2001/XMLSchema#integer> .\r\n    _:c83cecd897cf243a9a6203bad3f5f0b411 <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> _:c83cecd897cf243a9a6203bad3f5f0b412 .\r\n    _:c83cecd897cf243a9a6203bad3f5f0b412 <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> \"2.0\"^^<http://www.w3.org/2001/XMLSchema#decimal> .\r\n    _:c83cecd897cf243a9a6203bad3f5f0b412 <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> _:c83cecd897cf243a9a6203bad3f5f0b413 .\r\n    _:c83cecd897cf243a9a6203bad3f5f0b413 <http://www.w3.org/1999/02/22-rdf-syntax-ns#first> \"3E1\"^^<http://www.w3.org/2001/XMLSchema#double> .\r\n    _:c83cecd897cf243a9a6203bad3f5f0b413 <http://www.w3.org/1999/02/22-rdf-syntax-ns#rest> <http://www.w3.org/1999/02/22-rdf-syntax-ns#nil> .\r\n    _:c83cecd897cf243a9a6203bad3f5f0b411 <http://example.org/stuff/1.0/p> \"w\" .\r\n\r\nBase Definition\r\n---------------\r\n\r\nRelative IRIs like <#green-goblin> are resolved relative to the current base IRI. When no base is defined, the value passed by the\r\n'--base' parameter is prepended to the relative IRI.\r\nFile 'base.ttl' consist of the single triple statement with two relative IRIs.\r\n\r\n    <#green-goblin> a <#comic-hero> .\r\n\r\nThe relative IRIs are appended to the \"http://marvel/universe\" string.\r\n\r\n    chelona --base \"http://marvel/universe\" base.ttl\r\n\r\n    <http://marvel/universe/#green-goblin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://marvel/universe/#comic-hero> .\r\n\r\nWith $PWD resolving to \"/Users/jp/chelona\" the '--base' parameter produces a prefix \"<file:///Users/jp/chelona/\" which is prepended to the relative IRI.\r\n\r\n    chelona --base \"file://\"$PWD base.ttl\r\n\r\n    <file:///Users/jp/chelona/#green-goblin> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <file:///Users/jp/chelona/#comic-hero> .\r\n\r\nError Handling\r\n--------------\r\n\r\nIn case of an error *Cheló̱na* will display an error message and give a hint where the problem occurred.\r\n\r\n    chelona --validate --verbose TurtleTests/turtle-syntax-bad-struct-02.ttl\r\n\r\n    Validate: TurtleTests/turtle-syntax-bad-struct-02.ttl\r\n    File 'TurtleTests/turtle-syntax-bad-struct-02.ttl': Invalid input '=', expected predicate or http://www.w3.org/1999/02/22-rdf-syntax-ns#type (line 2, column 40):\r\n    <http://www.w3.org/2013/TurtleTests/s> = <http://www.w3.org/2013/TurtleTests/o> .\r\n\r\nSome internal parsing information will be emitted in case of an error when \"--trace\" is used as command line argument.\r\n\r\n    chelona --validate --verbose --trace TurtleTests/turtle-syntax-bad-struct-02.ttl\r\n\r\n    Validate: TurtleTests/turtle-syntax-bad-struct-02.ttl\r\n    File 'TurtleTests/turtle-syntax-bad-struct-02.ttl': Invalid input '=', expected IRIREF or prefixedName (line 2, column 40):\r\n    <http://www.w3.org/2013/TurtleTests/s> = <http://www.w3.org/2013/TurtleTests/o> .\r\n                                           ^\r\n\r\n    5 rules mismatched at error location:\r\n      ...oc/ *:-58 /statement/ |:-39 /triples/ |:-39 /predicateObjectList/ + /po/ /verb/ | /predicate/ /iri/ | /IRIREF/ atomic / '<'\r\n      ...| /predicate/ /iri/ | /prefixedName/ | /PNAME_LN/ /PNAME_NS/ ? /PN_PREFIX/ atomic / capture / PN_CHARS_BASE:<CharPredicate>\r\n      ... |:-39 /triples/ |:-39 /predicateObjectList/ + /po/ /verb/ | /predicate/ /iri/ | /prefixedName/ | /PNAME_LN/ /PNAME_NS/ ':'\r\n      ...po/ /verb/ | /predicate/ /iri/ | /prefixedName/ | /PNAME_NS/ ? /PN_PREFIX/ atomic / capture / PN_CHARS_BASE:<CharPredicate>\r\n      .../statement/ |:-39 /triples/ |:-39 /predicateObjectList/ + /po/ /verb/ | /predicate/ /iri/ | /prefixedName/ | /PNAME_NS/ ':'\r\n\r\nProgrammatical Interface\r\n========================\r\n\r\nBinding of *Cheló̱na* artifacts from [Maven Central](http://search.maven.org/ \"Maven Central\") is done by adding the following dependency to your SBT build file\r\n    \r\n    libraryDependencies += \"com.github.jupfu\" %% \"chelona\" % \"1.1.0\"\r\n\r\nThe example program shows how to convert some Turtle data into the N3 Triple format.\r\n\r\n    import java.io.StringWriter\r\n\r\n    import org.chelona.{ RDFTripleOutput, ChelonaParser }\r\n\r\n    import org.parboiled2.ParseError\r\n\r\n    import scala.util.{ Failure, Success }\r\n\r\n    object Main extends App with RDFTripleOutput {\r\n\r\n      val input =\r\n        \"\"\"@base <http://example.org/> .\r\n           @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\r\n           @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\r\n           @prefix foaf: <http://xmlns.com/foaf/0.1/> .\r\n           @prefix rel: <http://www.perceive.net/schemas/relationship/> .\r\n\r\n           <#green-goblin> rel:enemyOf    <#spiderman> \t;\r\n              a foaf:Person ;    # in the context of the Marvel universe\r\n              foaf:name 'Green Goblin' ;\r\n              foaf:mail 'GreenGoblin@marvel.com' .\r\n\r\n           <#spiderman>\r\n              rel:enemyOf <#green-goblin> ;\r\n              a foaf:Person ;\r\n              foaf:name 'Spiderman', 'Человек-паук'@ru .\"\"\"\r\n\r\n      val output = new StringWriter()\r\n\r\n      val parser = ChelonaParser(input,  tripleWriter(output)_)\r\n\r\n      parser.turtleDoc.run() match {\r\n        case Success(tripleCount) ⇒\r\n          System.err.println(\"Input converted to \" + tripleCount + \" triples.\")\r\n          println(output)\r\n        case Failure(e: ParseError) ⇒ System.err.println(\"Unexpected error during parsing run: \" + parser.formatError(e))\r\n        case Failure(e)             ⇒ System.err.println(\"Unexpected error during parsing run: \" + e)\r\n      }\r\n    }\r\n        \r\nA complete simple build file for the example program is shown here\r\n\r\n    name := \"Chelona-Example\"\r\n\r\n    version := \"1.0\"\r\n\r\n    scalaVersion := \"2.11.7\"\r\n\r\n    libraryDependencies += \"com.github.jupfu\" %% \"chelona\" % \"1.1.0\"\r\n\r\nBuild Your Own Output Format\r\n============================\r\n\r\nLook at https://github.com/JuPfu/chelona/wiki to see how to create your own output format.\r\n\r\nWhat *Cheló̱na* Does in Detail:\r\n==============================\r\n- parses the ttl file\r\n- reports syntax errors\r\n- builds an abstract syntax tree for each valid turtle statement\r\n- resolves prefix declarations\r\n- unescapes numeric and string escape sequences in string-literal productions\r\n- unescapes numeric escape sequences in Iriref productions for output format 'raw'\r\n- transforms each turtle statment into the canonical subject-predicate-object (s-p-o) format\r\n- skolemisation (Replacing blank nodes with IRIs) (to be done)\r\n\r\nTriG-Section\r\n============\r\n\r\nThe TriG language definition can be found here http://www.w3.org/TR/trig/ .\r\n\r\nFirst Example\r\n=============\r\n\r\nExample1 at https://www.w3.org/TR/trig/ is a simple TriG-file, which is part of the language description at http://www.w3.org/TR/trig/ .\r\n\r\n    # This document encodes one graph.\r\n    @prefix ex: <http://www.example.org/vocabulary#> .\r\n    @prefix : <http://www.example.org/exampleDocument#> .\r\n    \r\n    :G1 { :Monica a ex:Person ;\r\n                  ex:name \"Monica Murphy\" ;\r\n                  ex:homepage <http://www.monicamurphy.org> ;\r\n                  ex:email <mailto:monica@monicamurphy.org> ;\r\n                  ex:hasSkill ex:Management ,\r\n                              ex:Programming . }\r\n\r\n*Cheló̱na* dissolves the statements into the canonical quad form, which is represented by pure subject, predicate, object and graph components:\r\n\r\n    <http://www.example.org/exampleDocument#Monica> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.example.org/vocabulary#Person> <http://www.example.org/exampleDocument#G1> .\r\n    <http://www.example.org/exampleDocument#Monica> <http://www.example.org/vocabulary#name> \"Monica Murphy\" <http://www.example.org/exampleDocument#G1> .\r\n    <http://www.example.org/exampleDocument#Monica> <http://www.example.org/vocabulary#homepage> <http://www.monicamurphy.org> <http://www.example.org/exampleDocument#G1> .\r\n    <http://www.example.org/exampleDocument#Monica> <http://www.example.org/vocabulary#email> <mailto:monica@monicamurphy.org> <http://www.example.org/exampleDocument#G1> .\r\n    <http://www.example.org/exampleDocument#Monica> <http://www.example.org/vocabulary#hasSkill> <http://www.example.org/vocabulary#Management> <http://www.example.org/exampleDocument#G1> .\r\n    <http://www.example.org/exampleDocument#Monica> <http://www.example.org/vocabulary#hasSkill> <http://www.example.org/vocabulary#Programming> <http://www.example.org/exampleDocument#G1> .\r\n\t\r\nConversion is done with\r\n\r\n    scala -cp ./target/scala-2.11/chelona-assembly-1.1.0.jar org.chelona.TriGMain --verbose ./examples/example1.trig > example1.nq\r\n    \r\nor using the shorthand alias chelona_trig (see the Installation chapter)\r\n\r\n    chelona_trig -v ./examples/example1.trig > example1.nq\r\n    \r\nPostscript\r\n==========\r\nQuestions, support, cooperation or collaboration are explicitely welcome!\r\n\r\nLicense\r\n=======\r\n\r\n*Cheló̱na* is released under the `Apache License 2.0`\r\n\r\nhttp://en.wikipedia.org/wiki/Apache_license\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}